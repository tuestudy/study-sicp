#lang scheme

(define (square x) (* x x))
(define (sum-of-squares x y z)
  (+ (square x)
     (square y)
     (square z)))
(define (sum-of-two-big-numbers-squares x y z)
  (- (sum-of-squares x y z)
     (square (min x y z))))
(define (middle x y z)
  (- (+ x y z)
     (max x y z)
     (min x y z)))
(define (sum-of-two-big-numbers-squares-2 x y z)
  (sum-of-squares (max x y z) (middle x y z) 0))
(define (is-middle? x y z)
  (or (and (>= x y) (<= x z))
      (and (<= x y) (>= x z))))
(define (middle-2 x y z)
  (cond ((is-middle? x y z) x)
        ((is-middle? y x z) y)
        ((is-middle? z x y) z)))
(define (sum-of-two-big-numbers-squares-3 x y z)
  (sum-of-squares (max x y z) (middle-2 x y z) 0))

"all tests -----------------"
(and
 (= (square 2) 4)
 (= (sum-of-squares 1 2 3) 14)
 (= (sum-of-two-big-numbers-squares 1 2 3) 13)
 (= (middle 1 3 2) 2)
 (= (sum-of-two-big-numbers-squares-2 1 2 3) 13)
 (is-middle? 2 1 3)
 (is-middle? 1 1 3)
 (not (is-middle? 1 2 3))
 (= (middle-2 1 2 3) 2)
 (= (sum-of-two-big-numbers-squares-3 1 3 2) 13)
)
