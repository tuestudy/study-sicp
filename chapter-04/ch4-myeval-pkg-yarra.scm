(load "../misc/local-table.scm")
(load "../misc/myeval-helper.scm")

(define (operands exp) (cdr exp))

(define (install-myeval-package)
  (define (let->combination letexp)
    (define (normlet->combination letexp)
      (define body (caddr letexp))
      (define names (map car (cadr letexp)))
      (define values (map cadr (cadr letexp)))
      (cons (list 'lambda names body) values))
    (define (namedlet->combination letexp)
      (define body (cadddr letexp))
      (define names (map car (caddr letexp)))
      (define values (map cadr (caddr letexp)))
      (define var (cadr letexp))
      (list 'begin (list 'define var (list 'lambda names body)) (cons var values)))
    (if (list? letexp)
        (namedlet->combination letexp)
        (normlet->combination letexp)))
  (define (eval-and exp env)
    (define (iter operands env)
      (cond ((null? operands) true)
            ((true? (myeval (first-operand operands) env))
             (iter (rest-operands operands) env))
            (else false)))
    (iter (operands exp) env))
  (define (eval-or exp env)
    (define (iter operands env)
      (cond ((null? operands) false)
            ((false? (myeval (first-operand operands) env))
             (iter (rest-operands operands) env))
            (else true)))
    (iter (operands exp) env))
  (define (make-procedure_ exp env)
    (make-procedure 
     (lambda-parameters exp)
     (lambda-body exp)
     env))
  (define (eval-begin exp env)
    (define (begin-actions exp) (cdr exp))
    (eval-sequence (begin-actions exp) env))
  (define (eval-if exp env)
    (if (true? (myeval (if-predicate exp) env))
        (myeval (if-consequent exp) env)
        (myeval (if-alternative exp) env)))
  (define (text-of-quotation_ exp env) (text-of-quotation exp))
  (define (eval-cond exp env)
    (myeval (cond->if exp) env))
  (define (eval-let exp env)
    (myeval (let->combination exp) env))
  
  (put 'quote 'eval text-of-quotation_)
  (put 'set! 'eval eval-assignment)
  (put 'define 'eval eval-definition)
  (put 'if 'eval eval-if)
  (put 'lambda 'eval make-procedure_)
  (put 'begin 'eval eval-begin)
  (put 'cond 'eval eval-cond)
  (put 'and 'eval eval-and)
  (put 'or 'eval eval-or)
  (put 'let 'eval eval-let)
  'done)

(install-myeval-package)

(define (myapply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type -- APPLY" procedure))))

(define (myeval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        (else
         (let ((op (get (operator exp) 'eval)))
           (if op
               (op exp env)
               (myapply (myeval (operator exp) env)
                        (list-of-values (operands exp) env)))))))



;(load "../misc/myeval-test.scm")