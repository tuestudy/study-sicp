(namespace-require 'r5rs)

(define (make-queue)
  (let ((front-ptr null)
        (rear-ptr null))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
        (error "FRONT called with an empty queue")
        (car front-ptr)))
    (define (insert-queue! x)
      (let ((new-pair (cons x null)))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
                (set-cdr! rear-ptr new-pair)
                (set! rear-ptr new-pair)))))
    (define (delete-queue!)
      (if (empty-queue?)
        (error "DELETE! called with an empty queue")
        (set! front-ptr (cdr front-ptr))))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ))
    dispatch))

(define (empty-queue? q) ((q 'empty-queue?)))
(define (front-queue q) ((q 'front-queue)))

(define (insert-queue! q x) ((q 'insert-queue!) x))
(define (delete-queue! q) ((q 'delete-queue!)))
