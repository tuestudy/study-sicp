(namespace-require 'r5rs)

(define (mk-rec keys value)
  (cons (car keys)
        (if (= (length keys) 1)
          value
          (list (mk-rec (cdr keys) value)))))

(define (make-table)
  (let ((local-table (list '*table*)))
    (define (print) local-table)
    (define (len)
      (length (cdr local-table)))
    (define (assoc key records)
      (cond ((not (pair? records)) false)
            ((null? records) false)
            ((equal? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (look keys records)
      (cond ((null? keys) records)
            ((pair? records)
             (let ((subtbl (assoc (car keys) records)))
               (if subtbl
                 (look (cdr keys) (cdr subtbl))
                 false)))
            (else false)))
    (define (lookup keys)
      (look keys (cdr local-table)))
    (define (prepend! keys value tbl)
      (set-cdr! tbl
                (cons (mk-rec keys value)
                      (cdr tbl))))
    (define (ins! keys value tbl)
;      (display "ins! ")
;      (display keys) (display " ")
;      (display value) (display " ")
;      (display tbl) (display " ")
;      (newline)
;      (display "!")
;      (display (car keys))(newline)
;      (display (cdr tbl))(newline)

      (let ((record (assoc (car keys) (cdr tbl))))
;        (display "record = ")
;        (display record)
;        (newline)
        (if record
          (if (null? (cdr keys))
            (set-cdr! record value)
            (ins! (cdr keys) value record))
          (prepend! keys value tbl))))
    (define (insert! keys value)
      (ins! keys value local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'length) (len))
            ((eq? m 'print) (print))
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

