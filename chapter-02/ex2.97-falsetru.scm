(namespace-require 'r5rs)
(load "../misc/local-table.scm")

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error "No method for these types -- APPLY-GENERIC"
                 (list op type-tags))))))
(define (attach-tag tag x) (if (number? x) x (cons tag x)))
(define (type-tag x) (if (number? x) 'scheme-number (car x)))
(define (contents x) (if (number? x) x (cdr x)))

(define (add x y)     (apply-generic 'add x y))
(define (sub x y)     (apply-generic 'sub x y))
(define (mul x y)     (apply-generic 'mul x y))
(define (div x y)     (apply-generic 'div x y))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle     z) (apply-generic 'angle z))
(define (square x) (* x x))

; ordinary number
(define (install-scheme-number-package)
  (define (reduce-integers n d)
    (let ((g (gcd n d)))
      (list (/ n g) (/ d g))))
  (define (tag x) (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number) (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number) (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number) (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number) (lambda (x y) (tag (/ x y))))
  (put 'gcd '(scheme-number scheme-number) (lambda (a b) (attach-tag 'scheme-number (gcd a b))))
  (put 'make 'scheme-number (lambda (x) (tag x)))
  (put 'reduce '(scheme-number scheme-number) (lambda (a b) (map tag (reduce-integers a b))))
  'done)
(define (make-scheme-number n) ((get 'make 'scheme-number) n))

; rational number
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (make-rat n d)
  (let ((reduced (reduce n d)))
    (let ((nn (car reduced))
          (dd (cadr reduced)))
  (cons nn dd))))
(define (add-rat x y) (make-rat (add (mul (numer x) (denom y)) (mul (numer y) (denom x))) (mul (denom x) (denom y))))
(define (sub-rat x y) (make-rat (sub (mul (numer x) (denom y)) (mul (numer y) (denom x))) (mul (denom x) (denom y))))
(define (mul-rat x y) (make-rat (mul (numer x) (numer y)) (mul (denom x) (denom y))))
(define (div-rat x y) (make-rat (mul (numer x) (denom y)) (mul (denom x) (numer y))))
(define (install-rational-package)
  ;; interface
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational (lambda (n d) (tag (make-rat n d))))
  'done)
(define (make-rational n d) ((get 'make 'rational) n d))

; rectangular complex
(define (install-rectangular-package)
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z) (sqrt (+ (square (real-part z)) (square (imag-part z)))))
  (define (angle z) (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a) (cons (* r (cos a)) (* r (sin a))))
  ; interface
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle     '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(define (make-from-real-imag x y) ((get 'make-from-real-imag 'rectangular) x y))

; polar complex
(define (install-polar-package)
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z) (* (magnitude z) (cos (angle z))))
  (define (imag-part z) (* (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y) (cons (sqrt (+ (square x) (square y))) (atan y x)))
  ; interface
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(define (make-from-mag-ang r a) ((get 'make-from-mag-ang 'polar) r a))

; complex
(define (install-complex-package)
  (define (make-from-real-imag x y) ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a) ((get 'make-from-mag-ang 'polar) r a))
  (define (add-complex z1 z2) (make-from-real-imag (+ (real-part z1) (real-part z2)) (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2) (make-from-real-imag (- (real-part z1) (real-part z2)) (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2) (make-from-mag-ang (* (magnitude z1) (magnitude z2)) (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2) (make-from-mag-ang (* (magnitude z1) (magnitude z2)) (- (angle z1) (angle z2))))
  ;; interface
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex) (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex) (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex) (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex) (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'make-from-real-imag 'complex (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(define (make-complex-from-real-imag x y) ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a) ((get 'make-from-mag-ang 'complex) r a))











(put '=zero? '(scheme-number) (lambda (x) (= x 0))) 
(put '=zero? '(rational) (lambda (x) (= (numer x) 0)))
(put '=zero? '(complex)
     (lambda (x)
       (or (and (= (real-part x) 0)
                (= (imag-part x) 0))
           (= (angle x) 0))))
(define (=zero? x) (apply-generic '=zero? x))


(define (make-term order coeff) (list order coeff))
(define (order term) (car term))
(define (coeff term) (cadr term))

(define (make-poly variable term-list) (cons variable term-list))
(define (variable p) (car p))
(define (term-list p) (cdr p))
(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (variable? x) (symbol? x))

(define (adjoin-term term term-list)
  (if (=zero? (coeff term))
      term-list
      (cons term term-list)))
(define (the-empty-termlist) '())
(define (first-term term-list) (car term-list))
(define (rest-terms term-list) (cdr term-list))
(define (empty-termlist? term-list) (null? term-list))

(define (install-polynomial-package)
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (add-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var -- ADD-POLY"
             (list p1 p2))))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
            (let ((t1 (first-term L1)) (t2 (first-term L2)))
              (cond ((> (order t1) (order t2))
                     (adjoin-term
                       t1 (add-terms (rest-terms L1) L2)))
                    ((< (order t1) (order t2))
                     (adjoin-term
                       t2 (add-terms L1 (rest-terms L2))))
                    (else
                      (adjoin-term
                        (make-term (order t1)
                                   (add (coeff t1) (coeff t2)))
                        (add-terms (rest-terms L1)
                                   (rest-terms L2)))))))))
  (define (sub-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (sub-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var -- SUB-POLY"
             (list p1 p2))))
  (define (sub-terms L1 L2)
    (add-terms L1 (neg-terms L2)))
  (define (neg-poly p)
    (make-poly (variable p)
               (neg-terms (term-list p))))
  (define (neg-terms L) (map neg-term L))
  (define (neg-term t) (list (order t) (- (coeff t))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (mul-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var -- MUL-POLY"
             (list p1 p2))))
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
      (the-empty-termlist)
      (add-terms (mul-term-by-all-terms (first-term L1) L2)
                 (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
      (the-empty-termlist)
      (let ((t2 (first-term L)))
        (adjoin-term
          (make-term (+ (order t1) (order t2))
                     (mul (coeff t1) (coeff t2)))
          (mul-term-by-all-terms t1 (rest-terms L))))))
  (define (div-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (let ((div-mod (div-terms (term-list p1)
                                (term-list p2))))
        (list
          (make-poly (variable p1) (car div-mod))
          (make-poly (variable p2) (cadr div-mod))))
      (error "Polys not in same var -- DIV-POLY"
             (list p1 p2))))
  (define (div-terms L1 L2)
    (if (empty-termlist? L1)
      (list (the-empty-termlist) (the-empty-termlist))
      (let ((t1 (first-term L1))
            (t2 (first-term L2)))
        (if (> (order t2) (order t1))
          (list (the-empty-termlist) L1)
          (let ((new-c (div (coeff t1) (coeff t2)))
                (new-o (- (order t1) (order t2))))
            (let ((rest-of-result
                    (div-terms (sub-terms L1
                                          (mul-term-by-all-terms
                                           (make-term new-o new-c) L2))
                               L2)
                          ))
              (list (adjoin-term (make-term new-o new-c) (car rest-of-result))
                    (cadr rest-of-result))
              ))))))
  (define (gcd-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (gcd-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- GCD-POLY"
               (list p1 p2))))
  (define (gcd-terms a b)
    (if (empty-termlist? b)
      (let ((g (apply gcd (map coeff a))))
        (car (div-terms a (list (make-term 0 g)))))
      (gcd-terms b (pseudoremainder-terms a b))))
  (define (remainder-terms L1 L2)
    (cadr (div-terms L1 L2)))
  (define (reduce-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (let ((result (reduce-terms (term-list p1)
                                  (term-list p2))))
        (list
          (make-poly (variable p1) (car result))
          (make-poly (variable p1) (cadr result))))
      (error "Polys not in same var -- REDUCE-POLY"
             (list p1 p2))))
  (define (reduce-terms n d)
    (let ((g (gcd-terms n d)))
      (let ((f (integerizing-factor2 n d g)))
        (let ((t (make-term 0 f)))
          (let ((n2 (mul-term-by-all-terms t n))
                (d2 (mul-term-by-all-terms t d)))
            (let ((n3 (car (div-terms n2 g)))
                  (d3 (car (div-terms d2 g))))
              (let ((gi (apply gcd (append (map coeff n3) (map coeff d3)))))
                (let ((gt (list (make-term 0 gi))))
                  (list (car (div-terms n3 gt))
                        (car (div-terms d3 gt)))
                  ))))))))
  (define (integerizing-factor2 P Q G)
    (let ((O1 (max (order (first-term P)) (order (first-term Q))))
          (O2 (order (first-term G)))
          (c  (coeff (first-term G))))
      (expt c (+ 1 (- O1 O2)))))

  (define (integerizing-factor P Q)
    (let ((O1 (order (first-term P)))
          (O2 (order (first-term Q)))
          (c  (coeff (first-term Q))))
      (expt c (+ 1 (- O1 O2)))))
  (define (pseudoremainder-terms P Q)
    (let ((factor (integerizing-factor P Q)))
      (let ((t (make-term 0 factor)))
        (let ((P2 (mul-term-by-all-terms t P)))
          (remainder-terms P2 Q)))))

  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial) (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(polynomial polynomial) (lambda (p1 p2) (tag (sub-poly p1 p2))))
  (put 'mul '(polynomial polynomial) (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'gcd '(polynomial polynomial) (lambda (p1 p2) (tag (gcd-poly p1 p2))))
  (put 'reduce '(polynomial polynomial) (lambda (a b) (map tag (reduce-poly a b))))
  (put 'make 'polynomial (lambda (var terms) (tag (make-poly var terms))))
  (put '=zero? '(polynomial) (lambda (x) (empty-termlist? (term-list x))))
  'done)
(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))

(define (greatest-common-divisor a b) (apply-generic 'gcd a b))
(define (reduce a b) (apply-generic 'reduce a b))
