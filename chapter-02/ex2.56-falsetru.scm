(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (augend exp) var)
                   (deriv (addend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplicand exp)
                         (deriv (multiplier exp) var))
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))))
        ((exp? exp)
         (make-product
           (make-product (exponent exp)
                         (** (base exp) (make-sum (exponent exp) -1)))
           (deriv (base exp) var)))
        (else
          (error "unknown expression type -- DERIV" exp))))

(define variable? symbol?)
(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (=number? exp num)
  (and (number? exp) (eq? exp num)))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2) (* m1 m2)))
        (else (list '* m1 m2))))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define augend cadr)
(define addend caddr)
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define multiplicand cadr)
(define multiplier caddr)

(define (** exp num)
  (cond ((=number? num 0) 1)
        ((=number? num 1) exp)
        ((and (number? exp) (number? num)) (expt exp num))
        (else (list '** exp num))))
(define (exp? x) (and (pair? x) (eq? (car x) '**)))
(define base cadr)
(define exponent caddr)
